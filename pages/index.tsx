import { useEffect, useRef } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { MovieTile, SearchInput, Modal } from "#components";
import { TilesGrid, Button, DataStatusArea, Typography } from "#atoms";
import useFetchMovies from "src/hooks/useFetchMovies";
import useFilters from "src/hooks/useFilters";
import { Movie } from "src/types/movie";
import Layout from "src/layout/default";
import MovieDetailPage from "./movie/[id]";

const Home: NextPage = () => {
  const router = useRouter();
  const { filters, setFilterValue, updatePage } = useFilters();
  const { performFetch, movies, isLoading, meta } = useFetchMovies();
  const inputRef = useRef<HTMLInputElement>(null);

  const handleOnClickMovie = (movie: Movie) => {
    router.push(
      {
        pathname: "/",
        query: { ...router.query, modal: movie.imdbID },
      },
      `/movie/${movie.imdbID}`,
      { shallow: true }
    );
  };

  useEffect(() => {
    inputRef.current?.focus();
  }, [inputRef]);

  useEffect(() => {
    filters.s && performFetch(filters);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [filters]);

  return (
    <Layout>
      <Head>
        <title>Welcome to WDIW</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <SearchInput
        name="s"
        placeholder="Which movie/serie you just watched?"
        onChange={(name, value) => setFilterValue(name, value)}
        debounceOnChangeDelay={500}
        forwardRef={inputRef}
      />

      <TilesGrid>
        {movies.map(movie => (
          <MovieTile
            key={movie.imdbID}
            movie={movie}
            onClick={() => handleOnClickMovie(movie)}
          />
        ))}
      </TilesGrid>

      <DataStatusArea>
        {isLoading && <Typography>Loading...</Typography>}
        {!isLoading && movies.length === 0 && filters.s && (
          <Typography>There is no movies/series with this name...</Typography>
        )}
        {meta && movies.length < meta.totalResults && !isLoading && (
          <Button onClick={() => updatePage(filters.page + 1)}>
            Show More
          </Button>
        )}
      </DataStatusArea>

      {router.query.modal && (
        <Modal onClose={() => router.back()}>
          <MovieDetailPage asPortal movieId={router.query.modal as string} />
        </Modal>
      )}
    </Layout>
  );
};

export default Home;
